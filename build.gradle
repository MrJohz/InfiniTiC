import groovy.json.*

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = 'forge'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}

plugins {
	id "com.matthewprenger.cursegradle" version "1.0.9"
}

task wrapper(type: Wrapper) {
   gradleVersion = '2.12' //version required
}

apply plugin: 'net.minecraftforge.gradle.forge'

repositories {
    maven {
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }
}

// Define properties file
ext.configFile = file "build.properties"
def numbersFile = new File("buildno.properties")	

configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop

	def numbers = new Properties();
	numbers.load(numbersFile.newDataInputStream())
	project.ext.buildNumbers = new ConfigSlurper().parse(numbers)
}

sourceCompatibility = config.java_version
targetCompatibility = config.java_version    

version = "${config.minecraft_version}-${buildNumbers.mod_version}.${buildNumbers.build_number}"
group = 'infinitic'
archivesBaseName = 'Infini-TiC'

ext.artifact_version_override = 'NotUsed'
//gitignored config file -- if this has the entry for override it will override the version for local builds
//create a file called version.properties with the line artifact_version_override=NotUsed
//replace not used w/ version #'s for manual local overrides
ext.configFile2 = file "version.properties"
if (configFile2.exists()){
    configFile2.withReader {
        def prop2 = new Properties()
        prop2.load(it)
        ext.GIVersionFL = new ConfigSlurper().parse prop2
        if (GIVersionFL != null){
            project.artifact_version_override = GIVersionFL.artifact_version_override
        }
    }
}

dependencies {
    deobfCompile "slimeknights.mantle:Mantle:${config.mantle_version}"
    deobfCompile "slimeknights:TConstruct:${config.tconstruct_version}"
}

// Finds and sets version data
task buildInfo {
    def cmd = "git rev-parse --short HEAD"
    def proc = cmd.execute()
    proc.waitFor()
    if (proc.exitValue() == 0) {
        ext.revision = proc.text.trim()
    } else {
        ext.revision = "GITBORK"
    }

    if (System.getenv().BUILD_NUMBER != null) {
        ext.buildNum = System.getenv().BUILD_NUMBER
    } else {
        ext.buildNum = "DEV.${project.buildInfo.revision}"
    }
}

ext.artifact_version = 'NFG'
if (System.getenv().ARTIFACT_VERSION == null && artifact_version_override == 'NotUsed') {
    artifact_version = "${config.mod_version}.${project.buildInfo.buildNum}"
}
if (System.getenv().ARTIFACT_VERSION != null && artifact_version_override == 'NotUsed') {
    artifact_version = "${system.getenv().ARTIFACT_VERSION}"
}
if (artifact_version_override != 'NotUsed') {
    artifact_version = "${artifact_version_override}"
}

//version = "${config.minecraft_version}-${artifact_version}"

minecraft {
    mappings = config.forge_mappings
    version = config.minecraft_version + '-' + config.forge_version // + '-' + config.minecraft_version
    if (file('../run').exists()) {
	    runDir = '../run/eclipse'
    } else {
	    runDir = 'eclipse'
    }

	replace '${MODVERSION}', buildNumbers.mod_version + '.' + buildNumbers.build_number
	replace '${MCVERSION}', config.minecraft_version

}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // Replace stuff in text files, not binaries.
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
        // Replace version and mc_version
        expand 'version': config.mod_version, 'mc_version':config.minecraft_version
    }
        
    // Copy everything else that's not text
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
    }
}

// Create deobf dev jars
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

artifacts {
    archives deobfJar
}

curseforge {

	apiKey = project.curseForgeApiKey
	project {
		id = '247823'
		changelog = file('changelog.txt')
		releaseType = 'release'
		addGameVersion "${config.minecraft_version}"

		mainArtifact(jar) {
			displayName = "InfiniTiC-${config.minecraft_version}-${buildNumbers.mod_version}.${buildNumbers.build_number}"
			relations {
		        requiredLibrary 'tinkers-construct' // Tinkers Construct is required
		        requiredLibrary 'mantle' // Mantle is required
        		}
		}		
	}

}

//call curseforge, then update the version file and increment the build number ready for next time
task lakPublish(dependsOn: 'curseforge') {
	doLast {
	    def updateJsonFile = file(System.getProperty("user.home") + '/Dropbox/MinecraftModFiles/versions/infinitic.json')
	    if (updateJsonFile.exists()) {
		    def updateJson = new JsonSlurper().parse(updateJsonFile) as Map
			
			// Ensure there is a section for this MC version
			updateJson.get("${minecraft.version}" as String, [:])
		
		    // Add to version section
		    updateJson."${minecraft.version}"."${version}" = "See https://github.com/LakMoore/InfiniTiC/blob/master/changelog.txt"
		
		    // Update promos
		    updateJson.promos."${minecraft.version}-latest" = "${version}"
		    updateJson.promos."${minecraft.version}-recommended" = "${version}"
		
		    updateJsonFile.write(JsonOutput.prettyPrint(JsonOutput.toJson(updateJson)))
	    }
	
	    def cmd = "git tag -a v${buildNumbers.mod_version}.${buildNumbers.build_number} -m ''"
	    println cmd.execute().text.split().size()
		//def proc = cmd.execute()
		//proc.waitFor()
	    
	    buildNumbers.build_number = (buildNumbers.build_number.toString().toInteger()) + 1
	    numbersFile.withWriter {
	        buildNumbers.toProperties().store(it, "")
	    }
    }
}
